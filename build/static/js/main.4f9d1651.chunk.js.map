{"version":3,"sources":["components/Home/Home.js","components/Details/Details.js","components/Edit/Edit.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["Home","state","movie","title","description","getMovies","_this","props","dispatch","type","hover","setState","getDetail","id","history","push","this","_this2","react_default","a","createElement","className","react_router_dom","reduxStore","movies","map","key","onMouseOver","onClick","src","poster","alt","Component","connect","Details","componentDidMount","getMovieDetail","payload","match","params","handleBack","handleEdit","concat","detail","genre_list","Button","color","variant","Edit","handleChange","event","input","Object","objectSpread","defineProperty","target","value","handleSave","alert","FormControl","InputLabel","FilledInput","defaultValue","onChange","fullWidth","IconButton","Cancel","Save","App","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","rootSaga","updateMovie","regenerator_default","wrap","_context","prev","next","takeEvery","stop","_marked","response","_context2","axios","get","sent","put","data","t0","_marked2","action","_response","_context3","_marked3","_context4","_marked4","sagaMiddleware","createSagaMiddleware","storeInstance","createStore","combineReducers","arguments","length","undefined","applyMiddleware","logger","run","ReactDOM","render","es","store","components_App_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4f9d1651.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nclass Home extends Component {\n\n    // local state to hold movie info to display on DOM\n    state = {\n        movie: {\n            title: '',\n            description: ''\n        }\n    }\n\n    // run on page load\n    componentDidMount() {\n        this.getMovies();\n    }\n\n    // populates page with movie list from redux store\n    getMovies = () => {\n        this.props.dispatch({ type: 'GET_MOVIES' })\n    }\n\n    // set movie to local state on hover\n    hover = (movie) => {\n        this.setState({\n            movie: {\n                title: movie.title,\n                description: movie.description\n            }\n        })\n    }\n\n    // navigate to selected movie detail page\n    getDetail = (id) => {\n        this.props.history.push('/details/' + id)\n    }\n\n    render() {\n        return (\n            <div className=\"Home\" >\n                <Router>\n                    <h1 className=\"App-title\">Movie Sagas</h1>\n                    <div className=\"Movie-list\">\n                        {this.props.reduxStore.movies.map(movie => (\n                            <div className=\"cell\" key={movie.id}>\n                                <img className=\"cellImage\" onMouseOver={() => this.hover(movie)}\n                                    onClick={() => this.getDetail(movie.id)} key={movie.id}\n                                    src={movie.poster} alt={movie.title} />\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"Movie-detail\">\n                        <h3>{this.state.movie.title}</h3>\n                        <h5>{this.state.movie.description}</h5>\n                    </div>\n                </Router>\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = (reduxStore) => ({\n    reduxStore\n});\n\nexport default connect(mapStateToProps)(Home);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '@material-ui/core';\n\nclass Details extends Component {\n\n    // run on page load\n    componentDidMount = () => {\n        this.getMovieDetail();\n    }\n\n    // populates page with selected movie from redux store\n    getMovieDetail = () => {\n        this.props.dispatch({ type: 'GET_DETAIL', payload: this.props.match.params })\n    }\n\n    // navigate to movie list/home page\n    handleBack = () => {\n        this.props.history.push('/')\n    }\n\n    // navigate to edit page for selected movie\n    handleEdit = (id) => {\n        this.props.history.push(`/details/${id}/edit`)\n    }\n\n    render() {\n        return (\n            <div className=\"Details\" >\n                {this.props.reduxStore.detail.map(movie =>\n                    <div key={movie.id}>\n                        <h2>{movie.title}</h2>\n                        <img src={movie.poster} alt={movie.description} />\n                        <h4>{movie.description}</h4>\n                        <h4>Genres: {movie.genre_list}</h4>\n                        <Button color='secondary' variant='contained' onClick={this.handleBack}>Back</Button>\n                        <Button color='primary' variant='contained' onClick={() => this.handleEdit(movie.id)} >Edit</Button>\n                    </div>\n                )}\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore,\n});\n\nexport default connect(mapStateToProps)(Details);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { IconButton, FilledInput, InputLabel, FormControl } from '@material-ui/core';\nimport { Cancel, Save } from '@material-ui/icons';\n\n\nclass Edit extends Component {\n\n    // local state to hold input for PUT call to database\n    state = {\n        movie: {\n            title: '',\n            description: '',\n            id: this.props.match.params.id\n        },\n    }\n\n    // run on page load\n    componentDidMount = () => {\n        this.getMovieDetail();\n    }\n\n    // populates page with selected movie from redux store\n    getMovieDetail = () => {\n        this.props.dispatch({ type: 'GET_DETAIL', payload: this.props.match.params })\n    }\n\n    // clear local state and navigate back to movie detail page\n    handleBack = (id) => {\n        this.setState({\n            movie: {\n                title: '',\n                description: ''\n            }\n        })\n        this.props.history.push('/details/' + id)\n    }\n\n    // set local state on input entry\n    handleChange = (event, input) => {\n        this.setState({\n            movie: {\n                ...this.state.movie,\n                [input]: event.target.value\n            }\n        })\n    }\n\n    // send local state to database\n    handleSave = () => {\n        if (this.state.movie.title === '' || this.state.movie.description === '') {\n            alert('Please enter a new title AND description to save')\n        } else {\n            this.props.dispatch({ type: 'UPDATE_MOVIE', payload: this.state.movie })\n            this.handleBack(this.state.movie.id);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Edit\" >\n                {this.props.reduxStore.detail.map(movie =>\n                    <div className=\"Form\" key={movie.id}>\n                        {this.state.movie.title === '' ? <h2>{movie.title}</h2> :\n                            <h2>{this.state.movie.title}</h2>}\n                        <FormControl>\n                            <InputLabel>Edit title</InputLabel>\n                            <FilledInput defaultValue={movie.title}\n                                onChange={(event) => this.handleChange(event, 'title')}>\n                            </FilledInput>\n                        </FormControl>\n                        {this.state.movie.description === '' ? <h4>{movie.description}</h4> :\n                            <h4>{this.state.movie.description}</h4>}\n                        <FormControl fullWidth>\n                            <InputLabel>Edit description</InputLabel>\n                            <FilledInput defaultValue={movie.description}\n                                onChange={(event) => this.handleChange(event, 'description')}>\n                            </FilledInput>\n                        </FormControl>\n                        <h4>Genres: {movie.genre_list}</h4>\n                        <br />\n                        <IconButton color='secondary' onClick={() => { this.handleBack(movie.id) }}><Cancel /></IconButton>\n                        <IconButton color='primary' onClick={this.handleSave}><Save /></IconButton>\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore,\n});\n\nexport default connect(mapStateToProps)(Edit);","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport Home from '../Home/Home';\nimport Details from '../Details/Details';\nimport Edit from '../Edit/Edit'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Route exact path='/' component={Home} />\n          <Route exact path='/details/:id' component={Details} />\n          <Route exact path='/details/:id/edit' component={Edit} />\n          <footer id='footer'></footer>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default connect()(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { takeEvery, put } from 'redux-saga/effects';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport axios from 'axios';\n\n// Create the rootSaga generator function\nfunction* rootSaga() {\n    yield takeEvery('GET_MOVIES', getMovies);\n    yield takeEvery('GET_DETAIL', getDetail);\n    yield takeEvery('UPDATE_MOVIE', updateMovie);\n}\n\n// axios call to get movie list\nfunction* getMovies() {\n    try {\n        const response = yield axios.get('/movies');\n        yield put({ type: 'SET_MOVIES', payload: response.data });\n    } catch (error) {\n        console.log('error in GET', error);\n    }\n}\n\n// axios call to get additional details for each movie\nfunction* getDetail(action) {\n    try {\n        const response = yield axios.get('/movies/' + action.payload.id)\n        yield put({ type: 'SET_DETAIL', payload: response.data });\n    } catch (error) {\n        console.log('error in getDetail', error);\n    }\n}\n\n// axios call to update title and description of movie\nfunction* updateMovie(action) {\n    try {\n        console.log(action.payload);\n        let movie = action.payload;\n        yield axios.put('/movies', movie)\n        yield getDetail();\n    } catch (error) {\n        console.log('error in update', error);\n    }\n}\n\n// Create sagaMiddleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Used to store movies returned from the server\nconst movies = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_MOVIES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Used to store the movie genres for selected movie\nconst detail = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_DETAIL':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Create one store that all components can use\nconst storeInstance = createStore(\n    combineReducers({\n        movies,\n        detail,\n    }),\n    // Add sagaMiddleware to our store\n    applyMiddleware(sagaMiddleware, logger),\n);\n\n// Pass rootSaga into our sagaMiddleware\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>,\n    document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}